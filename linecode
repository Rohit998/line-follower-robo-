extern float Kp=15,Ki=0.01,Kd=5;
extern float error=0, P=0, I=0, D=0, PID_value=0;
extern float previous_error=0, previous_I=0;
extern int sensor[5]={0, 0, 0, 0, 0};
extern int initial_motor_speed=130;

void read_sensor_values(void);
void calculate_pid(void);
void motor_control(void);

void setup()
{
 pinMode(9,OUTPUT); //PWM Pin 1
 pinMode(10,OUTPUT); //PWM Pin 2
 pinMode(4,OUTPUT); //Left Motor Pin 1
 pinMode(5,OUTPUT); //Left Motor Pin 2
 pinMode(12,OUTPUT); //Right Motor Pin 1
 pinMode(13,OUTPUT);  //Right Motor Pin 2
 Serial.begin(9600); //Enable Serial Communications
}

void loop()
{
    read_sensor_values();
    calculate_pid();
    motor_control();
}

void read_sensor_values()
{
  sensor[0]=digitalRead(A0);
  sensor[1]=digitalRead(A1);
  sensor[2]=digitalRead(A2);
  sensor[3]=digitalRead(A3); 
  sensor[4]=digitalRead(A4);
  
  if( ((sensor[0]==0)&&(sensor[1]==0)&&(sensor[2]==0)&&(sensor[3]==0)&&(sensor[4]==0)) || ((sensor[0]==1)&&(sensor[1]==1)&&(sensor[2]==0)&&(sensor[3]==0)&&(sensor[4]==0)) )
  error=5;
  
  else if((sensor[0]==1)&&(sensor[1]==1)&&(sensor[2]==1)&&(sensor[3]==1)&&(sensor[4]==0))
  error=4;
  
  else if((sensor[0]==1)&&(sensor[1]==1)&&(sensor[2]==1)&&(sensor[3]==0)&&(sensor[4]==0))
  error=3;
  
  else if((sensor[0]==1)&&(sensor[1]==1)&&(sensor[2]==1)&&(sensor[3]==0)&&(sensor[4]==1))
  error=2;
  
  else if((sensor[0]==1)&&(sensor[1]==1)&&(sensor[2]==0)&&(sensor[3]==0)&&(sensor[4]==1))
  error=1;
  
  else if((sensor[0]==1)&&(sensor[1]==1)&&(sensor[2]==0)&&(sensor[3]==1)&&(sensor[4]==1))
  error=0;
  
  else if((sensor[0]==1)&&(sensor[1]==0)&&(sensor[2]==0)&&(sensor[3]==1)&&(sensor[4]==1))
  error=-1;
  
  else if((sensor[0]==1)&&(sensor[1]==0)&&(sensor[2]==1)&&(sensor[3]==1)&&(sensor[4]==1))
  error=-2;
  
  else if((sensor[0]==0)&&(sensor[1]==0)&&(sensor[2]==1)&&(sensor[3]==1)&&(sensor[4]==1))
  error=-3;
  
  else if((sensor[0]==0)&&(sensor[1]==1)&&(sensor[2]==1)&&(sensor[3]==1)&&(sensor[4]==1))
  error=-4;

  else if((sensor[0]==0)&&(sensor[1]==0)&&(sensor[2]==0)&&(sensor[3]==1)&&(sensor[4]==1))
  error=-5;
  
  else if((sensor[0]==1)&&(sensor[1]==1)&&(sensor[2]==1)&&(sensor[3]==1)&&(sensor[4]==1))
  error = 10; 
    
}

void calculate_pid()
{
  if (error == 10)
  {
    if(previous_error>0)
    {
      PID_value=1;
    }

    else
    {
      PID_value=-1;
    }
  }
  else
  {
    P = error;
    I = I + previous_I;
    D = error-previous_error;
   
    PID_value = (Kp*P) + (Ki*I) + (Kd*D);
    
    previous_I=I;
    previous_error=error;
  }
}

void motor_control()
{
    if (PID_value == 1)
    {
      // Calculating the effective motor speed:
      int left_motor_speed = initial_motor_speed;
      int right_motor_speed = initial_motor_speed;
    
      // The motor speed should not exceed the max PWM value
      constrain(left_motor_speed,0,255);
      constrain(right_motor_speed,0,255);
  
      analogWrite(9,initial_motor_speed);   //Left Motor Speed
      analogWrite(10,initial_motor_speed);  //Right Motor Speed
      //following lines of code are to make the bot move forward
      /*The pin numbers and high, low values might be different
      depending on your connections */
      digitalWrite(4,LOW); //Left Motor FW
      digitalWrite(5,HIGH); //Left Motor BW
      digitalWrite(12,LOW); //Right BW
      digitalWrite(13,HIGH); //Right FW
    }

    else if(PID_value==-1)
    {
      // Calculating the effective motor speed:
      int left_motor_speed = initial_motor_speed;
      int right_motor_speed = initial_motor_speed;
    
      // The motor speed should not exceed the max PWM value
      constrain(left_motor_speed,0,255);
      constrain(right_motor_speed,0,255);
  
      analogWrite(9,initial_motor_speed);   //Left Motor Speed
      analogWrite(10,initial_motor_speed);  //Right Motor Speed
      //following lines of code are to make the bot move forward
      /*The pin numbers and high, low values might be different
      depending on your connections */
      digitalWrite(4,HIGH); //Left Motor FW
      digitalWrite(5,LOW); //Left Motor BW
      digitalWrite(12,HIGH); //Right BW
      digitalWrite(13,LOW); //Right FW
    }
          else
    {
      // Calculating the effective motor speed:
      int left_motor_speed = initial_motor_speed-PID_value;
      int right_motor_speed = initial_motor_speed+PID_value;
    
      // The motor speed should not exceed the max PWM value
      constrain(left_motor_speed,0,255);
      constrain(right_motor_speed,0,255);
  
      analogWrite(9,initial_motor_speed-PID_value);   //Left Motor Speed
      analogWrite(10,initial_motor_speed+PID_value);  //Right Motor Speed
      //following lines of code are to make the bot move forward
      /*The pin numbers and high, low values might be different
      depending on your connections */
      digitalWrite(4,HIGH); //Left Motor FW
      digitalWrite(5,LOW); //Left Motor BW
      digitalWrite(12,LOW); //Right BW
      digitalWrite(13,HIGH); //Right FW
    }
}
    
